Raspberry Pi Assembly Language
Learn how to program your favourite computer in its native machine code by using Assembly Language. Bruce Smith explains the use of registers and how to pass information to and from your code.
The ARM has a very specific and special design; this is known as its architecture because it refers to how it is constructed and how it looks from the user’s point of view. Having an understanding of this architecture is an important aspect of learning to program Raspberry Pi’s processor. You need to appreciate how it all fits together and how the various elements interact. In fact, the purpose of much of the machine code we will be creating is to gain access and manipulate the various parts in the ARM chip itself. 
The ARM uses a load and store architecture. It is very efficient at manipulating data, doing so quickly. It does this by using special areas of memory built inside the processor called registers. Because they are on-board they are lightening fast in operation. For the most part, when we program in assembler we are doing so in User Mode – and as the sentence suggests there are other modes available. These are more specialised and they require a degree of programming experience to use them.
In User Mode there are 17 registers that can be accessed by the programmer, as shown in Figure 1. In their simplest form they are numbered 0 to 15 and we prefix them with an ‘R’ to indicate a register is being referred to - thus R0, R1, R2. Registers R0 to R12 are available for all your requirements and, for the most part, can be treated as identical. You can load, manipulate and store information in these. Generally these registers are used to hold an item of data or a value that represents a location in memory (an address).
Registers R13, R14 and R15 all have special functions. R13 is the Stack Pointer and this contains an address that points to an area of memory which we can use to save information.(This area of memory is called a stack and it has some special properties we will look at in a future article.) We saw R14 and R15 we saw in action in the last article (and I the program examples in this one) with the instruction:
MOV R15, R14
It’s generally the very last one that you will use in your assembler programs. When a machine code program is called from the command line, the address calling the program is placed in R14 – the Link Register. (Remember that although you are using BBC BASIC to assemble you program it is itself being run by machine code, so we need to know where to return to when your code has finished executing!) The MOV instruction moves this saved address into R15 – the Program Counter. The PC is the means by which the ARM knows where it is in a seemingly never ending list of machine code instructions. If you corrupt the contents of the PC then your program will certainly ‘freeze’, so good housekeeping in this respect is imperative.
The 17th register in User Mode is called the Current Program Status Register or simply, Status Register (SR) and this register allows you as the programmer to test and control your program operation – we’ll look at this in detail next time.
Each of these registers can hold a value that equates to 32-bits or four bytes in length, also known as a word. If you are not familiar with bits, bytes, words and binary numbers in general then check out the following link: www.brucesmith.info/numbers.html

Passing Values in Registers
The registers R0 through R12 are identical for all intents and purposes. Human nature being what it is we tend to use the lower number registers more frequently. The other advantage of this is that we can pass values from our BBC BASIC programs directly into registers.
When CALL is used to execute a program the values of the integer variables A% through to H% are passed into registers R0 to R7 respectively. The program VRAIABLETEST will add the values passed to it by B% and C% and the result is printed out using the OS_WriteC call. The result returned is the same as last month’s sample program.
The CALL command cannot return a value to your calling program, to do this you should use the USR command. This is similar to CALL, however it allows you to pass a result back to BBC BASIC from your machine code. It uses the format:
<variable>=USR <address>
As you can see the address, which may be a variable, is used to identify where the machine code is located. A variable is specified on the left of the command, into which a value will be returned. For example:
Result=USR START
The value returned in the ‘Result’ variable is that held in R0 when the code hands control back to BBC BASIC. 
The program USRTEST modifies VARIBLETEST slightly to add the values passed in B% and C% storing the result in R0 so that it is captured in the Return variable.

BREAK OUT PANEL 1: Programs and Description
10 REM >VARIABLETEST
20 DIM CODE% (100)
30 B%=&20
40 C%=&A
50 P%=CODE%
60 [
70 .START
80 ADD R0, R1, R2
90 SWI “OS_WriteC”
100 MOV R15, R14
110 ]
120 CALL START
When the program is called B% and C% are placed in R1 and R2 (lines 30 and 40. The ADD instruction in line 80 places the sum of R1 and R2 into R0. So &20 is added to &A to give &2A, Line 90 uses the OS Write Character call to print the contents of R0 as an ASCII character. The ASCII character for &2A is ‘*’.
10 REM >USRTEST
20 DIM CODE% (100)
30 B%=&20
40 C%=&A
50 P%=CODE%
60 [
70 .START
80 ADD R0, R1, R2
100 MOV R15, R14
110 ]
120 Result=USR START
130 PRINT Result
Line 90 has been deleted from the original program. Line 120 has been modified to replace CALL with USR and line 130 has been added to print out the value of ‘Result’. The value returned is 42 which is the decimal equivalent of &2A.
BREAK OUT PANEL 2: The ADD instruction
The ADD instruction is a very commonly used one in ARM machine code. It takes the format:
ADD <destination>, <Operand1>, <Operand2>
<destination> is the destination register for the result of the sum of <Operand1> and <operand2>, If you like:
<destination>=<Operand1>+<Operand2>.
The <destination> must always be a register but <Operand1> and <Operand2> can be registers or immediate values which are signified with a hash. <Operand1> may be the same as <destination>. Here are some examples:
ADD R0, R0, #1 ; Increment contents of R0 by 1
ADD R0, PC, #12; Add 12 to value of PC and save in R0

TIP PANEL
The BBC BASIC Assembler will recognise both lower and uppercase use of ‘R’ when you reference them in your assembler. So R0 and r0 are interchangeable. The assembler will also allow you to use ‘PC’ or ‘pc’ in place of R15, and likewise ‘LR’ or ‘lr’ and ‘SP” or ‘sp” for R13 and R14 – these being the link register and stack pointer. The assembler will assemble these following instructions identically:
MOV R15, R14
MOV pc, lr
From a programming style point of view it is best to stick with one or the other. The advantage of this is that you do not continually have to seek out the SHIFT or CAPS LOCK key. If you are a proficient typist them you will find a combination of upper and lower case names, say lower case for labels, is more pleasing to the eye.

FIGURES

Figure 1. Registers available to the programmer in User Mode.

ENDS

Bruce Smith is an award winning author. His book, Raspberry Pi Assembly Language Beginners, is now available from Amazon. Check him and his book out at www.brucesmith.info for more Raspberry Pi resources. 
